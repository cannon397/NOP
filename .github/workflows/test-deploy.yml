on:
  workflow_dispatch:
#  push:
#    branches:
#    - test/deploy
jobs:    
  push_to_registry:
    name: Push Docker Image to Dokcer Hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}      
    steps:
      - name: Check Out the Repo
        uses: actions/checkout@v4

      - name: Set timezone to KST
        run: |
          sudo timedatectl set-timezone Asia/Seoul
          date

      - name: Create Properties File
        run: |
          echo "spring:" > ./src/main/resources/application-redis.yaml
          echo "  data:" >> ./src/main/resources/application-redis.yaml
          echo "    redis:" >> ./src/main/resources/application-redis.yaml
          echo "      host: redis-nop-container" >> ./src/main/resources/application-redis.yaml
          echo "      port: ${{ secrets.REDIS_PORT }}" >> ./src/main/resources/application-redis.yaml
          echo "      password: ${{ secrets.REDIS_PASSWORD }}" >> ./src/main/resources/application-redis.yaml

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Set execute permisstion for Gradlew
        run: chmod +x ./gradlew
        
      - name: Build with Gradle
        run: ./gradlew build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nop:latest
        
      - name: Get Github Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Print public Ip
        run: |
          echo "Public IPv4: ${{ steps.ip.outputs.ipv4 }}"        

      - name: Install OCI CLI
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults --install-dir ~/lib/oci-cli
          export PATH=~/lib/oci-cli/bin:$PATH
          echo $PATH
        shell: bash

      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_CLI_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
          echo "[DEFAULT]
          user=${{ secrets.OCI_CLI_USER }}
          fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_CLI_TENANCY }}
          region=${{ secrets.OCI_CLI_REGION }}
          key_file=~/.oci/oci_api_key.pem" > ~/.oci/config

      - name: Get existing security list rules
        run: |
          ~/lib/oci-cli/bin/oci network security-list get --security-list-id ${{ secrets.OCI_CLI_SECURITYLIST_ID }} --query 'data."ingress-security-rules"' --output json > existing-rules.json


      - name: Modify ingress rules
        run: |
          IP_ADDRESS="${{ steps.ip.outputs.ipv4 }}"
          NEW_RULE='{"protocol": "6", "source": "'$IP_ADDRESS'/32", "isStateless": false, "tcpOptions": {"destinationPortRange": {"min": 22, "max": 22}}}'
          jq --argjson newRule "$NEW_RULE" '. += [$newRule]' existing-rules.json > merged-ingress-rules.json


      - name: Update Security List
        run: |
          ~/lib/oci-cli/bin/oci network security-list update \
            --security-list-id ${{ secrets.OCI_CLI_SECURITYLIST_ID }} \
            --ingress-security-rules file://$(pwd)/merged-ingress-rules.json \
            --force > /dev/null
          
      - name: Execute command via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_DOMAIN }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nop:latest
            docker image tag ${{ secrets.DOCKERHUB_USERNAME }}/nop:latest backend-nop:test
            docker run -d --name backend-nop --network oracle backend-nop:test
            
      - name: Rollback Security List
        if: always()
        run: |
          ~/lib/oci-cli/bin/oci network security-list update \
            --security-list-id ${{ secrets.OCI_CLI_SECURITYLIST_ID }} \
            --ingress-security-rules file://$(pwd)/existing-rules.json \
            --force > /dev/null
